top_annotation = ha,
cluster_rows = T, # Cluster by proteins
cluster_columns = F) # Not cluster by columns (Keep the cell lines together)
View(df3)
View(df)
palette_cell <- colorRampPalette(brewer.pal(length(levels(df$celltype)), "Set3"))(length(levels(df$celltype)))
palette_sub <- colorRampPalette(brewer.pal(length(levels(df$substrate)), "Paired"))(length(levels(df$substrate)))
color_cell <- list(type = c())
for (i in 1:length(levels(df$celltype_num))){
color_1$type <- append(color_1$type, palette_1[i])
}
names(color_1$type) <- as.character(levels(df$celltype_num))
color_cell <- list(type = c())
for (i in 1:length(levels(df$celltype_num))){
color_cell$type <- append(color_cell$type, palette_1[i])
}
names(color_cell$type) <- as.character(levels(df$celltype_num))
remove(color_1)
color_sub <- list(type = c())
for (i in 1:length(levels(df$substrate_num))){
color_sub$type <- append(color_sub$type, palette_1[i])
}
names(color_sub$type) <- as.character(levels(df$substrate_num))
color_sub$type <- append(color_sub$type, palette_sub[i])
color_sub <- list(type = c())
for (i in 1:length(levels(df$substrate_num))){
color_sub$type <- append(color_sub$type, palette_sub[i])
}
names(color_sub$type) <- as.character(levels(df$substrate_num))
length(levels(df$substrate_num))
levels(df$substrate_num)
View(df)
df$substrate_num
df <- data.frame(colnames(heatdata))
df$substrate <- as.factor(str_match(df[,1], "_[^_]+"))
df$celltype <- as.factor(str_match(df[,1], "^[^_]+"))
df$substrate_num <- as.factor(df$substrate)
df$celltype_num <- as.factor(df$celltype)
for (i in 1:length(levels(df$celltype))){
levels(df$celltype_num)[i] <- i
}
for (i in 1:length(levels(df$substrate))){
levels(df$substrate_num)[i] <- i
}
levels(df$substrate_num)
palette_cell <- colorRampPalette(brewer.pal(length(levels(df$celltype)), "Set3"))(length(levels(df$celltype)))
palette_sub <- colorRampPalette(brewer.pal(length(levels(df$substrate)), "Paired"))(length(levels(df$substrate)))
color_cell <- list(type = c())
for (i in 1:length(levels(df$celltype_num))){
color_cell$type <- append(color_cell$type, palette_cell[i])
}
names(color_cell$type) <- as.character(levels(df$celltype_num))
color_sub <- list(type = c())
for (i in 1:length(levels(df$substrate_num))){
color_sub$type <- append(color_sub$type, palette_sub[i])
}
names(color_sub$type) <- as.character(levels(df$substrate_num))
color_cell <- list(type = c())
for (i in 1:length(levels(df$celltype_num))){
color_cell$celltype <- append(color_cell$celltype, palette_cell[i])
}
names(color_cell$celltype) <- as.character(levels(df$celltype_num))
color_sub <- list(type = c())
for (i in 1:length(levels(df$substrate_num))){
color_sub$surface <- append(color_sub$surface, palette_sub[i])
}
names(color_sub$surface) <- as.character(levels(df$substrate_num))
test <- data.frame(type = c(rep("a", 5), rep("b", 5)),
age = sample(1:20, 10))
test
df$substrate_num
test <- list(type = c("a" = "red", "b" = "blue"),
age = colorRamp2(c(0, 20), c("white", "red")))
test
test <- list(type = c("a" = "red", "b" = "blue"),
age = colorRamp2(c(0, 20), c("white", "red")))
blear <- list(type = c("a" = "red", "b" = "blue"),
age = colorRamp2(c(0, 20), c("white", "red")))
blear
list(type = c("a" =  "red", "b" = "blue"), type = c("a" =  "red", "b" = "blue"))
color_sub
color_cell <- list(celltype = c())
for (i in 1:length(levels(df$celltype_num))){
color_cell$celltype <- append(color_cell$celltype, palette_cell[i])
}
names(color_cell$celltype) <- as.character(levels(df$celltype_num))
color_sub <- list(surface = c())
for (i in 1:length(levels(df$substrate_num))){
color_sub$surface <- append(color_sub$surface, palette_sub[i])
}
names(color_sub$surface) <- as.character(levels(df$substrate_num))
ha <- HeatmapAnnotation(df = df[,4:5],
col = list(color_sub$surface, color_cell$celltype))
ha <- HeatmapAnnotation(df = df[,4:5],
col = list(sub = color_sub$surface, cell = color_cell$celltype))
ha
Heatmap(heatdata,
name = "All Cell Lines",
column_title = "Cell type and substrate",
column_title_side = "bottom",
row_title = "Protein",
row_title_rot = 90,
heatmap_legend_param = list(title = "log2 intensity",
labels = c("0", "5", "10", "NA"),
labels_gp = gpar(fontsize = 8)),
na_col = "black",
show_row_names = F,
#row_names_gp = gpar(fontsize = 3),
column_names_gp = gpar(fontsize = 7),
col = colorRamp2(c(0,2,4,6,8,10,11),
c("red", "darkorange", "yellow",
"green", "dodgerblue", "darkorchid", "black")),
top_annotation = ha,
cluster_rows = T, # Cluster by proteins
cluster_columns = F) # Not
palette_sub <- colorRampPalette(brewer.pal(length(10, "Pastel2"))(length(levels(df$substrate)))
# Colors for cell type
color_cell <- list(celltype = c())
for (i in 1:length(levels(df$celltype_num))){
color_cell$celltype <- append(color_cell$celltype, palette_cell[i])
}
names(color_cell$celltype) <- as.character(levels(df$celltype_num))
color_sub <- list(surface = c())
for (i in 1:length(levels(df$substrate_num))){
color_sub$surface <- append(color_sub$surface, palette_sub[i])
}
names(color_sub$surface) <- as.character(levels(df$substrate_num))
ha <- HeatmapAnnotation(df = df[,4:5],
col = list(sub = color_sub$surface, cell = color_cell$celltype))
# Method with ComplexHeatMap
require(ComplexHeatMap)
require(circlize)
Heatmap(heatdata,
name = "All Cell Lines",
column_title = "Cell type and substrate",
column_title_side = "bottom",
row_title = "Protein",
row_title_rot = 90,
heatmap_legend_param = list(title = "log2 intensity",
labels = c("0", "5", "10", "NA"),
labels_gp = gpar(fontsize = 8)),
na_col = "black",
show_row_names = F,
#row_names_gp = gpar(fontsize = 3),
column_names_gp = gpar(fontsize = 7),
col = colorRamp2(c(0,2,4,6,8,10,11),
c("red", "darkorange", "yellow",
"green", "dodgerblue", "darkorchid", "grey4")),
top_annotation = ha,
cluster_rows = T, # Cluster by proteins
cluster_columns = F) # Not cluster by columns (Keep the cell lines together)
palette_cell <- colorRampPalette(brewer.pal(length(10, "Set3"))(length(levels(df$celltype))))
palette_sub <- colorRampPalette(brewer.pal(length(10, "Pastel2"))(length(levels(df$substrate))))
?brewer.pal
palette_sub <- colorRampPalette(brewer.pal(length(levels(df$substrate_num), "Pastel2"))(length(levels(df$substrate))))
palette_sub <- colorRampPalette(brewer.pal(length(levels(df$substrate_num)), "Pastel2"))(length(levels(df$substrate))))
palette_sub <- colorRampPalette(brewer.pal(length(levels(df$substrate_num)), "Pastel2"))(length(levels(df$substrate)))
palette_cell <- colorRampPalette(brewer.pal(length(levels(df$celltype_num)), "Set3"))(length(levels(df$celltype)))
df <- data.frame(colnames(heatdata))
df$substrate <- as.factor(str_match(df[,1], "_[^_]+"))
df$celltype <- as.factor(str_match(df[,1], "^[^_]+"))
df$substrate_num <- as.factor(df$substrate)
df$celltype_num <- as.factor(df$celltype)
for (i in 1:length(levels(df$celltype))){
levels(df$celltype_num)[i] <- i
}
for (i in 1:length(levels(df$substrate))){
levels(df$substrate_num)[i] <- i
}
palette_cell <- colorRampPalette(brewer.pal(length(levels(df$celltype_num)), "Set3"))(length(levels(df$celltype)))
palette_sub <- colorRampPalette(brewer.pal(length(levels(df$substrate_num)), "Pastel2"))(length(levels(df$substrate)))
color_cell <- list(celltype = c())
for (i in 1:length(levels(df$celltype_num))){
color_cell$celltype <- append(color_cell$celltype, palette_cell[i])
}
names(color_cell$celltype) <- as.character(levels(df$celltype_num))
color_sub <- list(surface = c())
for (i in 1:length(levels(df$substrate_num))){
color_sub$surface <- append(color_sub$surface, palette_sub[i])
}
names(color_sub$surface) <- as.character(levels(df$substrate_num))
ha <- HeatmapAnnotation(df = df[,4:5],
col = list(sub = color_sub$surface, cell = color_cell$celltype))
ha
ha <- HeatmapAnnotation(df = df[,4:5],
col = list(color_sub$surface, color_cell$celltype))
ha
ha <- HeatmapAnnotation(df = df[,4:5],
col = list(sub = color_sub$surface, cell = color_cell$celltype))
Heatmap(heatdata,
name = "All Cell Lines",
column_title = "Cell type and substrate",
column_title_side = "bottom",
row_title = "Protein",
row_title_rot = 90,
heatmap_legend_param = list(title = "log2 intensity",
labels = c("0", "5", "10", "NA"),
labels_gp = gpar(fontsize = 8)),
na_col = "black",
show_row_names = F,
#row_names_gp = gpar(fontsize = 3),
column_names_gp = gpar(fontsize = 7),
col = colorRamp2(c(0,2,4,6,8,10,11),
c("red", "darkorange", "yellow",
"green", "dodgerblue", "darkorchid", "grey4")),
top_annotation = ha,
cluster_rows = T, # Cluster by proteins
cluster_columns = F) # Not cluster by columns (Keep the cell lines together)
?unit
palette_sub <- colorRampPalette(brewer.pal(length(levels(df$substrate_num)), "Paired"))(length(levels(df$substrate)))
remove(palette_1, palette_2, my_palette)
palette_-sub
palette_sub
palette_sub <- colorRampPalette(brewer.pal(length(levels(df$substrate_num)), "Set3"))(length(levels(df$substrate)))
palette_cell <- colorRampPalette(brewer.pal(length(levels(df$celltype_num)), "Paired"))(length(levels(df$celltype)))
palette_cell
display.brewer.all()
palette_cell <- colorRampPalette(brewer.pal(length(levels(df$celltype_num)), "Paired"))(length(levels(df$celltype)))
palette_sub <- colorRampPalette(brewer.pal(length(levels(df$substrate_num)), "Set3"))(length(levels(df$substrate)))
color_cell <- list(celltype = c())
for (i in 1:length(levels(df$celltype_num))){
color_cell$celltype <- append(color_cell$celltype, palette_cell[i])
}
names(color_cell$celltype) <- as.character(levels(df$celltype_num))
color_sub <- list(surface = c())
for (i in 1:length(levels(df$substrate_num))){
color_sub$surface <- append(color_sub$surface, palette_sub[i])
}
names(color_sub$surface) <- as.character(levels(df$substrate_num))
ha <- HeatmapAnnotation(df = df[,4:5],
col = list(sub = color_sub$surface, cell = color_cell$celltype))
color_sub
remove(blear)
remove(listtest)
remove(test)
remove(list)
remove(i)
Heatmap(heatdata,
name = "All Cell Lines",
column_title = "Cell type and substrate",
column_title_side = "bottom",
row_title = "Protein",
row_title_rot = 90,
heatmap_legend_param = list(title = "log2 intensity",
labels = c("0", "5", "10", "NA"),
labels_gp = gpar(fontsize = 8)),
na_col = "black",
show_row_names = F,
#row_names_gp = gpar(fontsize = 3),
column_names_gp = gpar(fontsize = 7),
col = colorRamp2(c(0,2,4,6,8,10,11),
c("red", "darkorange", "yellow",
"green", "dodgerblue", "darkorchid", "grey4")),
top_annotation = ha,
top_annotation_height = unit(1, "cm")
cluster_rows = T, # Cluster by proteins
cluster_columns = F) # Not cluster by columns (Keep the cell lines together)
Heatmap(heatdata,
name = "All Cell Lines",
column_title = "Cell type and substrate",
column_title_side = "bottom",
row_title = "Protein",
row_title_rot = 90,
heatmap_legend_param = list(title = "log2 intensity",
labels = c("0", "5", "10", "NA"),
labels_gp = gpar(fontsize = 8)),
na_col = "black",
show_row_names = F,
#row_names_gp = gpar(fontsize = 3),
column_names_gp = gpar(fontsize = 7),
col = colorRamp2(c(0,2,4,6,8,10,11),
c("red", "darkorange", "yellow",
"green", "dodgerblue", "darkorchid", "grey4")),
top_annotation = ha,
top_annotation_height = unit(1, "cm"),
cluster_rows = T, # Cluster by proteins
cluster_columns = F) # Not cluster by columns (Keep the cell lines together)
palette_cell <- colorRampPalette(brewer.pal(10, "Paired"))(length(levels(df$celltype)))
palette_sub <- colorRampPalette(brewer.pal(10, "Set3"))(length(levels(df$substrate)))
# Colors for cell type
color_cell <- list(celltype = c())
for (i in 1:length(levels(df$celltype_num))){
color_cell$celltype <- append(color_cell$celltype, palette_cell[i])
}
names(color_cell$celltype) <- as.character(levels(df$celltype_num))
color_sub <- list(surface = c())
for (i in 1:length(levels(df$substrate_num))){
color_sub$surface <- append(color_sub$surface, palette_sub[i])
}
names(color_sub$surface) <- as.character(levels(df$substrate_num))
ha <- HeatmapAnnotation(df = df[,4:5],
col = list(sub = color_sub$surface, cell = color_cell$celltype))
remove(df2)
remove(df3, df, CleanedLongFrame)
df <- data.frame(colnames(heatdata))
df$substrate <- as.factor(str_match(df[,1], "_[^_]+"))
df$celltype <- as.factor(str_match(df[,1], "^[^_]+"))
df$substrate_num <- as.factor(df$substrate)
df$celltype_num <- as.factor(df$celltype)
for (i in 1:length(levels(df$celltype))){
levels(df$celltype_num)[i] <- i
}
for (i in 1:length(levels(df$substrate))){
levels(df$substrate_num)[i] <- i
}
require(stringr)
# Making annotation dataframe
df <- data.frame(colnames(heatdata))
df$substrate <- as.factor(str_match(df[,1], "_[^_]+"))
df$celltype <- as.factor(str_match(df[,1], "^[^_]+"))
df$substrate_num <- as.factor(df$substrate)
df$celltype_num <- as.factor(df$celltype)
for (i in 1:length(levels(df$celltype))){
levels(df$celltype_num)[i] <- i
}
for (i in 1:length(levels(df$substrate))){
levels(df$substrate_num)[i] <- i
}
require(RColorBrewer)
palette_cell <- colorRampPalette(brewer.pal(10, "Paired"))(length(levels(df$celltype)))
palette_sub <- colorRampPalette(brewer.pal(10, "Set3"))(length(levels(df$substrate)))
color_cell <- list(celltype = c())
for (i in 1:length(levels(df$celltype_num))){
color_cell$celltype <- append(color_cell$celltype, palette_cell[i])
}
names(color_cell$celltype) <- as.character(levels(df$celltype_num))
color_sub <- list(surface = c())
for (i in 1:length(levels(df$substrate_num))){
color_sub$surface <- append(color_sub$surface, palette_sub[i])
}
names(color_sub$surface) <- as.character(levels(df$substrate_num))
ha <- HeatmapAnnotation(df = df[,4:5],
col = list(sub = color_sub$surface, cell = color_cell$celltype))
source("https://bioconductor.org/biocLite.R")
biocLite("ComplexHeatmap")
require(ComplexHeatmap)
ha <- HeatmapAnnotation(df = df[,4:5],
col = list(sub = color_sub$surface, cell = color_cell$celltype))
require(circlize)
Heatmap(heatdata,
name = "All Cell Lines",
column_title = "Cell type and substrate",
column_title_side = "bottom",
row_title = "Protein",
row_title_rot = 90,
heatmap_legend_param = list(title = "log2 intensity",
labels = c("0", "5", "10", "NA"),
labels_gp = gpar(fontsize = 8)),
na_col = "black",
show_row_names = F,
#row_names_gp = gpar(fontsize = 3),
column_names_gp = gpar(fontsize = 7),
col = colorRamp2(c(0,2,4,6,8,10,11),
c("red", "darkorange", "yellow",
"green", "dodgerblue", "darkorchid", "gray")),
top_annotation = ha,
top_annotation_height = unit(1, "cm"),
cluster_rows = T, # Cluster by proteins
cluster_columns = F) # Not cluster by columns (Keep the cell lines together)
install.packages("circlize")
install.packages("circlize")
require(circlize)
?colorRamp2
Heatmap(heatdata,
name = "All Cell Lines",
column_title = "Cell type and substrate",
column_title_side = "bottom",
row_title = "Protein",
row_title_rot = 90,
heatmap_legend_param = list(title = "log2 intensity",
labels = c("0", "5", "10", "NA"),
labels_gp = gpar(fontsize = 8)),
na_col = "black",
show_row_names = F,
#row_names_gp = gpar(fontsize = 3),
column_names_gp = gpar(fontsize = 7),
col = colorRamp2(c(0,2,4,6,8,10,11),
c("red", "darkorange", "yellow",
"green", "dodgerblue", "darkorchid", "gray")),
top_annotation = ha,
top_annotation_height = unit(1, "cm"),
cluster_rows = T, # Cluster by proteins
cluster_columns = F) # Not cluster by columns (Keep the cell lines together)
setwd("~/GitHub/genomicsfinal")
df = read.csv('clean_data.csv', header=T)
library('gage')
library("gageData")
library("pathview")
foldchange <- df$X48h # Only pulling the 48 hour time point change
names(foldchange) <- id2eg(ids = df$Gene.Name,
pkg.name = "org.Mm.eg.db",
keep.order = TRUE,
na.rm=FALSE)[,2]
# Pull KEGG datasets
data(kegg.sets.mm) # Pulls out data from mouse kegg set
data(sigmet.idx.mm)
sigmet.kegg = kegg.sets.mm[sigmet.idx.mm] #Pull out only signaling and metabolic paths
# Give separate lists for pathways that are downregulate and upregulated
keggres = gage(foldchange, gsets = kegg.sets.mm, same.dir=TRUE)
keggres.sigmet = gage(foldchange, gsets = sigmet.kegg, same.dir=TRUE)
# Get top 3 upregulated pathways and grab ID names
keggrespaths_down = data.frame(id= rownames(keggres.sigmet$less), keggres.sigmet$less)
keggrespaths_down = keggrespaths_down[1:5,]
keggresids_down = substr(keggrespaths_down$id, start = 1, stop = 8)
write.csv(keggrespaths_down, "downregulated_kegg.csv")
# Generate CSV files for viewing later
keggrespaths_upreg = data.frame(id= rownames(keggres.sigmet$greater), keggres.sigmet$greater)
keggrespaths_upreg = keggrespaths_upreg[1:5,]
keggresids_upreg = substr(keggrespaths_upreg$id, start = 1, stop = 8)
write.csv(keggrespaths_upreg, "upregulated_kegg.csv")
downreg_gene_list = list()
# Loop through keggresids to get all 5 pathview pictures (made in directory)
for (i in 1:length(keggresids_down)){
#pathview(gene.data=foldchange, pathway.id= keggresids_down[i], species="mmu", new.signature=FALSE)
path_name <- paste0(keggrespaths_down$id[i])
path_to_add <- sigmet.kegg[path_name]
path_to_add[[1]] <- eg2id(eg = path_to_add[[1]], pkg.name = "org.Mm.eg.db", keep.order = T, na.rm = T)
downreg_gene_list[[i]] <- path_to_add
}
upreg_gene_list = list()
for (i in 1:length(keggresids_upreg)){
pathview(gene.data=foldchange, pathway.id= keggresids_upreg[i], species="mmu", new.signature=FALSE)
path_name <- paste0(keggrespaths_upreg$id[i])
path_to_add <- sigmet.kegg[path_name]
path_to_add[[1]] <- eg2id(eg = path_to_add[[1]], pkg.name = "org.Mm.eg.db", keep.order = T, na.rm = T)
upreg_gene_list[[i]] <- path_to_add
}
upreg_gene_list
print("hi")
echo "hi"
cat('hi')
cat(upreg_gene_list[[2]][,2])
upreg_gene_list[[2]][,2]
upreg_gene_list[[2]
]
upreg_gene_list[[2]][,2:2]
dim(upreg_gene_list[[2]])
len(upreg_gene_list[[2]])
length(upreg_gene_list[[2]])
cat(upreg_gene_list[[2]])
class(upreg_gene_list[[2]])
upreg_gene_list[[2]]
upreg_gene_list[[2]][2]
upreg_gene_list[[1]]
upreg_gene_list[[1]]$`mmu04810 Regulation of actin cytoskeleton`
test <- upreg_gene_list[[1]]$`mmu04810 Regulation of actin cytoskeleton`
type(test)
class(test)
View(test)
test[,2]
cat(test[,2])
test_test <- upreg_gene_list[[1]][[1]]
test_test
View(test_test)
test_test <- upreg_gene_list[[1]][[1]][2]
test_test <- upreg_gene_list[[1]][[1]][,2]
test_test
test_test[1]
test_test[3]
downreg_symbols <- downreg_gene_list[[1]][[1]][,2]
for (i in 1:length(downreg_symbols)){
cat(downreg_symbols[i])
}
for (i in 1:length(downreg_symbols)){
cat(downreg_symbols[i],"\n")
}
downreg_symbols <- downreg_symbols[!is.na(downreg_symbols),]
downreg_symbols <- downreg_symbols[!is.na(downreg_symbols)]
downreg_symbols
for (i in 1:length(downreg_symbols)){
cat(downreg_symbols[i],"\n")
}
downreg_gene_list[[1]]
downreg_gene_list[[1]][[1]]
names(downreg_gene_list[[1]])
class(names(downreg_gene_list[[1]]))
class(names(downreg_gene_list[[2]]))
names(downreg_gene_list[[2]])
downreg_symbols <- downreg_gene_list[[2]][[1]][,2]
downreg_symbols
for (i in 1:length(downreg_gene_list)){
cat("# ",names(downreg_gene_list[[i]]),"\n")
downreg_symbols <- downreg_gene_list[[i]][[1]][,2]
for (j in 1:length(downreg_symbols)){
cat(downreg_symbols[j],"\n")
}
}
for (i in 1:length(downreg_gene_list)){
cat("# ",names(downreg_gene_list[[i]]),"\n")
downreg_symbols <- downreg_gene_list[[i]][[1]][,2]
downreg_symbols <- downreg_symbols[!is.na(downreg_symbols)]
for (j in 1:length(downreg_symbols)){
cat(downreg_symbols[j],"\n")
}
}
print_symbols <- function(gene_list){
for (i in 1:length(gene_list)){
cat("# ",names(gene_list[[i]]),"\n")
symbols <- gene_list[[i]][[1]][,2]
symbols <- symbols[!is.na(symbols)]
for (j in 1:length(symbols)){
cat(symbols[j],"\n")
}
}
}
print_symbols(downreg_gene_list)
print_symbols(upreg_gene_list)
print_symbols(upreg_gene_list)
cat("\n")
print_symbols(downreg_gene_list
)
print_symbols(upreg_gene_list)
